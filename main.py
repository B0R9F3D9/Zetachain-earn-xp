import random, asyncio
from sys import stderr
from datetime import datetime
from loguru import logger
from questionary import Choice, select
from tabulate import tabulate

from config import ACCOUNTS, PROXIES, WITHDRAW_ADDRESSES
from core import *
from settings import *
from functions import *


async def checker(zetachains: list[Zetachain]) -> None:
    tasks = [loop.create_task(zetachain.check()) for zetachain in zetachains]
    result = await asyncio.gather(*tasks)
    result.sort(key=lambda x: x['‚Ññ'])
    print(tabulate(result, headers="keys", tablefmt="rounded_grid"))

def select_zetachains(zetachains: list[Zetachain]) -> list[Zetachain]:
    if len(zetachains) == 1: return zetachains
    print('–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã. –§–æ—Ä–º–∞—Ç: \n'
        '1 ‚Äî –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n'
        '1,2,3 ‚Äî –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ, –≤—Ç–æ—Ä–æ–≥–æ –∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n'
        '1-3 ‚Äî –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–æ —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ\n'
        'all ‚Äî –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter)\n')
    result = input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä: ')
    if result == 'all' or result == '': return zetachains
    try:
        if ',' in result:
            return [zetachains[int(i) - 1] for i in result.split(',')]
        elif '-' in result:
            return zetachains[int(result.split('-')[0]) - 1:int(result.split('-')[1])]
        elif '-' not in result and ',' not in result:
            return [zetachains[int(result) - 1]]
    except ValueError:
        raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–∏ÃÜ –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤!')

async def get_module() -> str:
    return await select(
        message="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã: ",
        instruction='(–∏—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)',
        choices=[
            Choice("üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ú–∞—Ä—à—Ä—É—Ç", 'work'),
            Choice("üß† –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç", 'custom_way'),
            Choice("üí≤ –í—ã–≤–æ–¥ —Å –û–ö–•", "okx_withdraw"),
            Choice("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–∫–µ", 'enroll'),
            Choice("üí∏ –ü–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ", 'transfer'),
            Choice("üîÑ –°–≤–∞–ø –Ω–∞ iZUMi", 'izumi_swap'),
            Choice("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–∞ iZUMi", 'izumi_liquidity'),
            Choice("üéÅ –ö–ª–µ–π–º –ø–æ–∏–Ω—Ç–æ–≤", 'claim'),
            Choice("üåπ –ú–∏–Ω—Ç $stZETA", "mint_stzeta"),
            Choice("üí∞ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞", 'withdraw'),
            Choice("üìä –ß–µ–∫–µ—Ä", 'checker'),
            Choice("üíπ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –û–ö–•", 'okx_balance'),
            Choice("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", 'back'),
            Choice("‚ùå –í—ã—Ö–æ–¥", "exit"),
        ],
        qmark="\n‚ùì ",
        pointer="üëâ "
    ).ask_async()

async def main(zetachains: list[Zetachain]) -> None:
    module = await get_module()
    if module == 'exit':
        raise KeyboardInterrupt
    elif module == 'checker':
        await checker(zetachains)
        return
    elif module == 'back':
        return True
    elif module == 'okx_balance':
        await get_okx_balance()
        return
    for zetachain in zetachains:
        if module in ['work', 'custom_way', 'okx_withdraw']:
            await globals()[module](zetachain)
        else:
            await run_solo_module(module, zetachain)
        if zetachain != zetachains[-1] and not zetachain.acc.proxy:
            await wait_for_new_ip()


if __name__ == '__main__':
    logger.remove()
    format='<white>{time:HH:mm:ss}</white> | <bold><level>{level: <7}</level></bold> | <level>{message}</level>'
    logger.add(sink=stderr, format=format)
    logger.add(sink=f'logs/{datetime.today().strftime("%Y-%m-%d")}.log', format=format)

    logger.info(f'–ù–∞–π–¥–µ–Ω–æ: {len(ACCOUNTS)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, {len(PROXIES)} –ø—Ä–æ–∫—Å–∏, {len(WITHDRAW_ADDRESSES)} –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞')
    accs = [Account(_id, key_mnemonic, PROXIES.get(_id) if USE_PROXY else None, WITHDRAW_ADDRESSES.get(_id))
            for _id, key_mnemonic in enumerate(ACCOUNTS, 1)]

    if SHUFFLE_WALLETS:
        random.shuffle(accs)
        logger.warning('–ê–∫–∫–∞—É–Ω—Ç—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã')
    logger.warning('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–æ–∫—Å–∏') if USE_PROXY else logger.warning('–ü—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è')
    if DO_ACTION_ANYWAY: logger.warning('–î–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ')

    ZETACHAINS = [Zetachain(acc) for acc in accs]    
    loop = asyncio.get_event_loop()
    loop.run_until_complete(get_okx_balance()) if USE_OKX else logger.warning('OKX –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è')
    loop.run_until_complete(checker(ZETACHAINS))
    zetachains = select_zetachains(ZETACHAINS)

    while True:
        try:
            result = loop.run_until_complete(main(zetachains))
            if result:
                loop.run_until_complete(checker(ZETACHAINS))
                zetachains = select_zetachains(ZETACHAINS)
        except KeyboardInterrupt:
            break
        except Exception as e:
           logger.critical(e)
           break

    print('üëãüëãüëã')
